import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
df = pd.read_csv("netflix1.csv")

# Step 1: Data Cleaning
print("\nMissing Values:\n", df.isnull().sum())  # Checking for missing values

# Filling missing values
df.fillna({'director': 'Unknown', 'country': 'Unknown', 'date_added': 'Unknown', 'rating': 'Unknown'}, inplace=True)

# Convert 'date_added' to datetime
df['date_added'] = pd.to_datetime(df['date_added'], errors='coerce')

# Extract year from date_added
df['year_added'] = df['date_added'].dt.year

# Encode categorical variables
label_encoders = {}
for col in ['type', 'rating']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Step 2: Exploratory Data Analysis (EDA)
plt.figure(figsize=(8, 5))
sns.countplot(x='type', data=df, palette='coolwarm')
plt.title('Distribution of Movies vs TV Shows')
plt.show()

# Top 10 countries with most content
plt.figure(figsize=(12, 6))
df['country'].value_counts().head(10).plot(kind='bar', color='skyblue')
plt.title('Top 10 Countries with Most Content')
plt.show()

# Step 3: Train Machine Learning Model (Predicting type of content)
X = df[['release_year', 'year_added']]
y = df['type']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 4: Model Evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Model Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))

# Step 5: Save Results
df.to_csv('cleaned_netflix_data.csv', index=False)
